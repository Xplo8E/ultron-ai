# src/ultron/reviewer.py
import os
import json
import re
from typing import Optional, Dict

import google.generativeai as genai
from dotenv import load_dotenv

from .models import ReviewData
from .constants import (
    AVAILABLE_MODELS,
    DEFAULT_MODEL_KEY,
    DEFAULT_REVIEW_PROMPT_TEMPLATE,
    USER_CONTEXT_TEMPLATE,
    USER_FRAMEWORK_CONTEXT_TEMPLATE,
    USER_SECURITY_REQUIREMENTS_TEMPLATE
)

load_dotenv()
GEMINI_API_KEY_LOADED = os.getenv("GEMINI_API_KEY")

if GEMINI_API_KEY_LOADED:
    genai.configure(api_key=GEMINI_API_KEY_LOADED)

def get_gemini_review(
    code: str,
    language: str,
    model_key: str = DEFAULT_MODEL_KEY,
    additional_context: Optional[str] = None,
    frameworks_libraries: Optional[str] = None,
    security_requirements: Optional[str] = None,
) -> Optional[ReviewData]:
    """
    Gets a code review from the Gemini API with enhanced context.
    """
    if not GEMINI_API_KEY_LOADED:
        return ReviewData(summary="API Key Error", error="GEMINI_API_KEY not configured.")

    user_context_section = ""
    if additional_context and additional_context.strip():
        user_context_section = USER_CONTEXT_TEMPLATE.format(additional_context=additional_context)

    user_framework_context_section = ""
    frameworks_libraries_list = "Not specified"
    if frameworks_libraries and frameworks_libraries.strip():
        user_framework_context_section = USER_FRAMEWORK_CONTEXT_TEMPLATE.format(frameworks_libraries=frameworks_libraries)
        frameworks_libraries_list = frameworks_libraries
        
    user_security_requirements_section = ""
    if security_requirements and security_requirements.strip():
        user_security_requirements_section = USER_SECURITY_REQUIREMENTS_TEMPLATE.format(security_requirements=security_requirements)


    prompt = DEFAULT_REVIEW_PROMPT_TEMPLATE.format(
        user_context_section=user_context_section,
        user_framework_context_section=user_framework_context_section,
        user_security_requirements_section=user_security_requirements_section,
        frameworks_libraries_list=frameworks_libraries_list,
        language=language,
        code_to_review=code
    )

    actual_model_name = AVAILABLE_MODELS.get(model_key, AVAILABLE_MODELS[DEFAULT_MODEL_KEY])
    print(f"Using Gemini model: {actual_model_name}") # Feedback to user

    model_instance = genai.GenerativeModel(
        actual_model_name,
        generation_config={
            "response_mime_type": "application/json",
            "temperature": 0.1,
            "top_k": 20,
            "top_p": 0.8,
        },
        safety_settings=[
            {"category": "HARM_CATEGORY_HARASSMENT", "threshold": "BLOCK_MEDIUM_AND_ABOVE"},
            {"category": "HARM_CATEGORY_HATE_SPEECH", "threshold": "BLOCK_MEDIUM_AND_ABOVE"},
            {"category": "HARM_CATEGORY_SEXUALLY_EXPLICIT", "threshold": "BLOCK_MEDIUM_AND_ABOVE"},
            {"category": "HARM_CATEGORY_DANGEROUS_CONTENT", "threshold": "BLOCK_MEDIUM_AND_ABOVE"},
        ]
    )

    input_code_tokens_count = 0
    additional_context_tokens_count = 0 # For all text-based contexts

    try:
        # Consolidate all textual context for token counting
        full_prompt_for_tokens = prompt.replace(f"```{language}\n{code}\n```", "") # remove code for separate counting
        if code:
            input_code_tokens_count = model_instance.count_tokens(code).total_tokens
        if full_prompt_for_tokens: # Count tokens for the rest of the prompt and contexts
             additional_context_tokens_count = model_instance.count_tokens(full_prompt_for_tokens).total_tokens

    except Exception as e:
        print(f"Warning: Could not count tokens - {e}")

    try:
        print("Sending request to Gemini API...")
        response = model_instance.generate_content(prompt) # Use model_instance

        if not response.candidates:
            error_message = "No content generated by API."
            if response.prompt_feedback and response.prompt_feedback.block_reason:
                error_message = f"Content generation blocked. Reason: {response.prompt_feedback.block_reason}."
                if response.prompt_feedback.safety_ratings:
                    error_message += f" Safety Ratings: {response.prompt_feedback.safety_ratings}"
            return ReviewData(summary="Review failed due to content blocking or empty response.", error=error_message)

        raw_json_text = response.text
        match = re.search(r"```(json)?\s*(.*?)\s*```", raw_json_text, re.DOTALL | re.IGNORECASE)
        cleaned_json_text = match.group(2).strip() if match else raw_json_text.strip()

        try:
            parsed_data = json.loads(cleaned_json_text)
            review_data_obj = ReviewData(**parsed_data)
            review_data_obj.input_code_tokens = input_code_tokens_count
            # The 'additionalContextTokens' field in ReviewData can now represent all non-code prompt tokens.
            review_data_obj.additional_context_tokens = additional_context_tokens_count 
            return review_data_obj
        except json.JSONDecodeError as e:
            err_msg = f"Failed to parse JSON: {e}. Response excerpt: {cleaned_json_text[:500]}"
            return ReviewData(summary="Review failed: JSON parsing error.", error=err_msg)
        except Exception as e: 
            err_msg = f"Error processing response: {e}. JSON excerpt: {cleaned_json_text[:500]}"
            return ReviewData(summary="Review failed: Data validation error.", error=err_msg)

    except Exception as e:
        err_msg = f"Gemini API call error: {e}"
        try:
            # Attempt to get block reason even if the main call failed
            if 'response' in locals() and response.prompt_feedback and response.prompt_feedback.block_reason:
                err_msg += f". API Block Reason: {response.prompt_feedback.block_reason}"
        except AttributeError: pass # response object might not have prompt_feedback
        except NameError: pass # response object might not be defined
        return ReviewData(summary="Review failed: API communication error.", error=err_msg)